---
name: Smart Commit
description: Prompts for commit with auto-generated message when "accept all" is clicked or "commit" command is used
---

# Smart Commit

This rule prompts you to commit changes when you click "accept all" or submit the command "commit" with no other text. It generates a suggested commit message based on file changes and asks you to confirm the message or provide your own.

## When accepting all changes or using commit command

```cursor
when: user clicks "accept all" or user says exactly "commit"
do:
  - run command "git status --porcelain" and store result as staged_files
  - if staged_files is empty
    - run command "git add ."
    - inform user "No staged changes found. All changes have been staged."
  - run command "git diff --cached --name-status" and store result as diff_summary
  - analyze diff_summary to categorize changes:
    - count added files (lines starting with A)
    - count modified files (lines starting with M)
    - count deleted files (lines starting with D)
    - identify file types and directories affected
  - generate commit_message based on analysis:
    - if single file changed
      - use format: "{action} {filename} {additional context}"
    - else
      - use format: "{primary action} in {main area}: {brief summary}"
  - ask user "Commit changes with message: '{commit_message}'? Type 'yes' to confirm, 'no' to cancel, or enter your own message."
  - wait for user response as user_input
  - if user_input equals "yes" (case insensitive)
    - run command "git commit -m '{commit_message}'"
    - inform user "Changes committed successfully!"
  - else if user_input equals "no" (case insensitive)
    - inform user "Commit cancelled."
  - else
    - run command "git commit -m '{user_input}'"
    - inform user "Changes committed with your message!"
```

## Example

When you click "accept all" or type "commit", the system will:
1. Check for staged changes and stage all changes if none are found
2. Analyze your changes (e.g., "2 files modified in auth module, 1 file added in utils")
3. Generate a commit message like "Add user authentication to login service" or "Update README with installation instructions"
4. Ask for your confirmation
5. Commit the changes with the suggested message or your own message

If you type "no", the commit process will be cancelled.